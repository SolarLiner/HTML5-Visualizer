{
  "author": {
    "name": "Beau Sorensen",
    "email": "mail@beausorensen.com",
    "url": "http://github.com/sorensen"
  },
  "name": "node-bitarray",
  "description": "Node buffer and bitarray / bytearray utility",
  "version": "0.0.2",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/sorensen/node-bitarray.git"
  },
  "engines": {
    "node": "0.x"
  },
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.9.0"
  },
  "readme": "\nBitArray\n========\n\n[![Build Status](https://secure.travis-ci.org/sorensen/node-bitarray.png)](http://travis-ci.org/sorensen/node-bitarray)\n\nUtility library for dealing with bit / byte arrays and converting between node \nBuffers and bitarrays.  \n\nUsage\n-----\n\n```js\nvar BitArray = require('node-bitarray')\n```\n\n\nMethods\n-------\n\n### BitArray\n\nSee: `BitArray.factory` for details on instantiation\n\n\n### BitArray.factory([bits], [length], [asOctet])\n\nReturn a new BitArray instance. Added for use in Array.map(), if a buffer is passed \nin, the `asOctet` will always be set to `true`.\n\n* `bits` - 32bit integer, or buffer/array of 32bit integers (optional)\n* `length` - zero fill the bitarray to the set length\n* `asOctet` - ensure resulting array length is a multiple of 8 (optional, default `false`)\n\n```js\n[255, 128].map(BitArray.factory).map(String) // [ '11111111', '00000001' ]\n```\n\n### BitArray.parse([bits], [asOctet])\n\nConvert a 32bit integer into a bit array, the `asOctet` will always be set to `true`\nif a Buffer is passed in.\n\n* `bits` - 32bit integer, or buffer/array of 32bit integers (optional)\n* `asOctet` - ensure resulting array length is a multiple of 8 (optional, default `false`)\n\n```js\nBitArray.parse(255) // [1, 1, 1, 1, 1, 1, 1, 1]\n```\n\n\n### BitArray.octet(array)\n\nZero fill an array until it represents an octet\n\n* `array` - bit array\n\n```js\nBitArray.octet([1, 0, 0]) // [1, 0, 0, 0, 0, 0, 0, 0]\n```\n\n\n### BitArray.equals(bitarray, bitarray)\n\nPerform an equality check on two BitArray instances\n\n* `bitarray` - bit array to compare\n* `bitarray` - bit array to compare\n\n```js\nvar a = new BitArray('0101')\n  , b = new BitArray('0101')\n  , c = new BitArray('10')\n\nBitArray.equals(a, b) // true\nBitArray.equals(b, c) // false\n```\n\n\n### BitArray.fromBinary(string)\n\nCreate a new instance from a binary string\n\n* `string` - binary string\n\n```js\nvar bits = BitArray.fromBinary('1001101')\nbits.toJSON() // [1, 0, 1, 1, 0, 0, 1]\n```\n\n\n### BitArray.fromOffsets(array)\n\nCreate a new instance from a offset positions of set bits\n\n* `string` - binary string\n\n```js\nvar bits = BitArray.fromOffsets([0, 4, 2, 9])\nbits.toJSON() // [1, 0, 1, 0, 1, 0, 0, 0, 0, 1]\n```\n\n\n### BitArray.fromNumber(number)\n\nCreate a new instance from a base 10 number\n\n* `number` - base 10 number\n\n**Aliases**: [`fromDecimal`]\n\n```js\nvar bits = BitArray.fromNumber(15)\nbits.toJSON() // [1, 1, 1, 1]\n```\n\n\n### BitArray.fromHexadecimal(string)\n\nCreate a new instance from a hexadecimal string, case insensitive.\n\n* `string` - hexadecimal string\n\n**Aliases**: [`fromHex`]\n\n```js\nvar bits = BitArray.fromHex('Fa')\nbits.toJSON() // [0, 1, 0, 1, 1, 1, 1, 1]\n```\n\n\n### BitArray.from32Integer(number)\n\nCreate a new instance from a 32bit integer\n\n* `number` - 32bit integer\n\n```js\nvar bits = BitArray.from32Integer(144)\nbits.toJSON() // [1, 0, 0, 1, 0, 0, 0, 0]\n```\n\n\n### BitArray.fromBuffer(buffer)\n\nCreate a new instance from a node buffer instance\n\n* `buffer` - node buffer instance\n\n**Aliases**: [`fromRedis`]\n\n```js\nvar buf = new Buffer([128, 144, 255])\n  , bits = BitArray.fromBuffer(buf)\n\nbits.toJSON() // [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]\n```\n\n\n### BitArray.and(array1, [array2], [...])\n\nPerform a bitwise `AND` operation on any number of bit arrays\n\n* `...` - any number of bit arrays\n\n**Alias**: [`intersect`]\n\n```js\nBitArray.and(\n  [ 1, 0, 0, 1, 0, 0, 0, 1 ]\n, [ 1, 0, 0, 0, 1, 0, 0, 1 ]\n, [ 0, 1, 0, 0, 0, 1, 0, 1 ]\n)\n//[ 0, 0, 0, 0, 0, 0, 0, 1 ]\n```\n\n\n### BitArray.toOffsets(array)\n\nFind the offset indexes of all set bits\n\n* `array` - bit array\n\n```js\nBitArray.toOffsets([0, 0, 1, 0, 1]) // [2, 4]\nnew BitArray(144).toOffsets()       // [0, 3]\n```\n\n\n### BitArray.toBuffer(bits)\n\n```js\n```\n\n\n### BitArray.toNumber(bits)\n\nConvert an array of bits to a base 10 number\n\n**Alias**: [`toDecimal`]\n\n```js\nBitArray.toNumber([1, 0, 1, 1, 0, 1]) // 45\n```\n\n\n### BitArray.toHexadecimal(bits)\n\nConvert an array of bits to a hex string. Results are lowercased.\n\n**Alias**: [`toHex`]\n\n```js\nBitArray.toHex([1, 0, 1, 1, 0, 1]) // '2d'\n```\n\n\n### BitArray.or(array1, [array2], [...])\n\nPerform a bitwise `OR` operation on any number of bit arrays\n\n* `...` - any number of bit arrays\n\n**Alias**: [`union`]\n\n```js\nBitArray.and(\n  [ 1, 0, 0, 1, 0, 0, 0, 1 ]\n, [ 1, 0, 0, 0, 1, 0, 0, 1 ]\n, [ 0, 1, 0, 0, 0, 1, 0, 1 ]\n)\n//[ 1, 1, 0, 1, 1, 1, 0, 1 ]\n```\n\n\n### BitArray.xor(array1, [array2], [...])\n\nPerform a bitwise `XOR` operation on any number of bit arrays\n\n* `...` - any number of bit arrays\n\n**Alias**: [`difference`]\n\n```js\nBitArray.xor(\n  [ 1, 0, 0, 1, 0, 0, 0, 1 ]\n, [ 1, 0, 0, 0, 1, 0, 0, 1 ]\n, [ 0, 1, 0, 0, 0, 1, 0, 1 ]\n)\n//[ 0, 1, 0, 1, 1, 1, 0, 1 ]\n```\n\n\n### BitArray.not(array)\n\nPerform a bitwise `NOT` operation on a single array\n\n* `array` - single bit array to flip\n\n**Alias**: [`reverse`]\n\n```js\nBitArray.not(\n  [ 1, 0, 0, 1, 0, 0, 0, 1 ]\n)\n//[ 0, 1, 1, 0, 1, 1, 1, 0 ]\n```\n\n\n### BitArray.bitcount(32bit)\n\nFind the cardinality of a bit array, 32bit integer, or buffer of 32bit ints\n\n* `bits` - 32bit integer, buffer of 32bit integers, or bit array\n\n**Alias**: [`count`, `cardinality`, `population`]\n\n```js\nBitArray.cardinality(144)              // 2\nBitArray.population(128)               // 1\nBitArray.count(new Buffer([255, 128])) // 9\nBitArray.bitcount([0,1,1,0,1])         // 3\n```\n\n\n### instance.set(index, value)\n\nSet the value of the bit array at the given index / offset\n\n* `index` - offset position to set value\n* `value` - bit val (1 / 0)\n\n```js\nnew BitArray().set(2, 1) // bits: [0, 0, 1]\n```\n\n\n### instance.get(index)\n\nGet the value of the bit array at the given index / offset\n\n* `index` - offset position to get\n\n```js\nnew BitArray(144).get(3) // 1\n```\n\n\n### instance.fill(offset) \n\nZero fill the current bits to the given offset\n\n* `offset` - zero fill the current bits to the given offset\n\n```js\nnew BitArray().fill(5) // bits: [0, 0, 0, 0, 0, 0]\n```\n\n\n### instance.bitcount()\n\nGet the bitcount of the current bits\n\n**Alias**: [`count`, `cardinality`, `population`]\n\n```js\nnew BitArray(255).cardinality() // 8\n```\n\n\n### instance.toString()\n\nGet the binary representation of the current bits, can also be used in \nstring coercion.\n\n```js\nnew BitArray(128).toString() // '00000001'\n[new BitArray(255)].join('') // '11111111'\n```\n\n\n### instance.valueOf()\n\nGet the base 10 number representing the current bits, can also be used\nin number coercion.\n\n**Alias**: [`toNumber`, `toDecimal`]\n\n```js\nnew BitArray(144).valueOf() // 9\n1 + new BitArray(255)       // 256\n```\n\n\n### instance.toJSON()\n\nGet a copy of the current bit array\n\n**Alias**: [`toArray`, `toBits`]\n\n```js\nnew BitArray(128).toJSON() // [1,0,0,0,0,0,0,0]\n```\n\n\n### instance.toBuffer()\n\nConvert the current bit array to a node Buffer\n\n```js\nnew BitArray(new Buffer([128, 255])).toBuffer() // <Buffer 80 ff>\n```\n\n\n### instance.toOffsets()\n\nConvert the current bit array to an offset array\n\n```js\nnew BitArray(new Buffer([128, 255])).toOffsets() // [0, 8, 9, 10, 11, 12, 13, 14, 15]\n```\n\n\n### instance.copy()\n\nCreate and return a copy of the current BitArray\n\n**Aliases**: [`clone`]\n\n```js\nvar bits = new BitArray(255)\n  , bits2 = bits.clone()\n\nBitArray.equals(bits, bits2) // true\nbits === bits2               // false\n```\n\n\n### instance.reset()\n\nReset the current bits, if a length was supplied to the constructor it will be used.\n\n**Aliases**: [`clear`]\n\n```js\nvar bits = new BitArray(144, 16)\nbits.toString() // '000000000001001'\n\n```\n\n\n### instance.equals(bitarray)\n\nDetermine if the instance is equal to another instance\n\n* `bitarray` - instance to compare\n\n```js\nvar a = new BitArray(1)          // [1]\n  , b = new BitArray(2)          // [1, 0]\n  , c = new BitArray().set(0, 1) // [1]\n\na.equals(b) // false\na.equals(c) // true\n```\n\n\n### instance.length\n\nGet the length of the current bit array\n\n```js\nnew BitArray().length           // 0\nnew BitArray([128, 255]).length // 16\n```\n\n\nInstall\n-------\n\nWith [npm](https://npmjs.org)\n\n```\nnpm install node-bitarray\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2013 Beau Sorensen <mail@beausorensen.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "readme.md",
  "_id": "node-bitarray@0.0.2",
  "dist": {
    "shasum": "447128e257aa3e0812e74caac922486a982e1086",
    "tarball": "http://registry.npmjs.org/node-bitarray/-/node-bitarray-0.0.2.tgz"
  },
  "_from": "node-bitarray@0.0.2",
  "_npmVersion": "1.2.15",
  "_npmUser": {
    "name": "sorensen",
    "email": "mail@beausorensen.com"
  },
  "maintainers": [
    {
      "name": "sorensen",
      "email": "mail@beausorensen.com"
    }
  ],
  "directories": {},
  "_shasum": "447128e257aa3e0812e74caac922486a982e1086",
  "_resolved": "https://registry.npmjs.org/node-bitarray/-/node-bitarray-0.0.2.tgz"
}
